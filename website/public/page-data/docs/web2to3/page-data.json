{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/docs/web2to3/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Web 2 to Web 3 integration","editLink":""},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Web 2 to Web 3 integration\",\n  \"order\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"web-2-to-web-3-integration\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#web-2-to-web-3-integration\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Web 2 to Web 3 integration\"), mdx(\"p\", null, \"To integrate traditional Web 2.0 sites with Web 3.0 blockchain technology, it is important to understand the limitations of storing large amounts of data on the blockchain due to associated gas fees. For example, popular e-commerce site Amazon stores images and other data on centralized databases like MongoDB. However, storing the same data on the blockchain can be costly due to gas fees associated with each block. For instance, a 2MB image requires 43 blocks, each with a gas fee attached to it. This can quickly become expensive for large amounts of data.\"), mdx(\"p\", null, \"To minimize costs, a common approach is to create a hash that stores the address of the image, which is then stored on the blockchain. Since a hash is small in size, it only requires 1 block to store, resulting in less gas fees. This hybrid approach allows for essential data to be stored on the blockchain while larger data like images and videos are stored on centralized or decentralized servers.\"), mdx(\"p\", null, \"Another approach to integrating Web 2.0 and Web 3.0 is to use decentralized identifiers (DIDs) and verifiable credentials. This approach allows for the creation of self-sovereign identities that users can control and use across different applications and platforms. By using DIDs, users can store their personal data and credentials on the blockchain and grant permission to third-party applications to access that data when needed. This provides a higher level of security and privacy compared to traditional centralized systems.\"), mdx(\"p\", null, \"In summary, integrating Web 2.0 and Web 3.0 requires a hybrid approach that takes into account the limitations of storing large amounts of data on the blockchain. By using techniques such as creating hashes and using DIDs, it is possible to overcome these limitations and create a more secure and decentralized web.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#web-2-to-web-3-integration","title":"Web 2 to Web 3 integration"}]}}},"pageContext":{"id":"65c408b5-b5c5-56c4-a3dd-8de5716930e3"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","3442269102","3597609067"]}